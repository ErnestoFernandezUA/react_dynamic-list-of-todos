{"version":3,"sources":["api/todos.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","getTodos","addUrl","fetch","then","response","json","TodoList","state","todos","query","selectedBy","changeInput","console","log","setState","selectHandler","selectBy","a","filterTodos","length","queryToLowerCase","toLowerCase","filter","todo","title","toLocaleLowerCase","includes","changeStatusTodo","todoId","todosChanged","map","id","currentData","Date","completed","updatedAt","buttonStyle","todoUserId","currentUserId","props","classNames","Object","keys","this","selectUserId","filteredTodos","className","htmlFor","type","placeholder","value","onChange","event","target","name","checked","createdAt","userId","onClick","React","Component","CurrentUser","user","username","email","phone","showCurrentUser","loadCurrentUser","prevProps","ok","Error","clearHandler","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8570f363.chunk.js","sourcesContent":["// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api`;\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getCompletedTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos?completed=true`)\n    .then(response => response.json());\n}\n\nexport function getActiveTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos?completed=false`)\n    .then(response => response.json());\n}\n\nexport function getCurrentUser(userId: number): Promise<Todo[]> {\n  // eslint-disable-next-line no-console\n  console.log(`${API_URL}/users/${userId}`);\n\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('404');\n      }\n\n      return response.json();\n    });\n}\n\nexport function getTodos(addUrl: string): Promise<Todo[]> {\n  return fetch(`${API_URL}${addUrl}`)\n    .then(response => response.json());\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\nimport { getTodos } from '../../api/todos';\n\ntype Props = {\n  // todos: Todo[],\n  currentUserId: number,\n  selectUserId: (userId: number) => void;\n  // changeStatusTodo: (todoId: string) => void;\n  // query: string,\n  // changeInput: (text: string) => void;\n  // selectedBy: string,\n  // selectHandler: (text:string) => void;\n};\n\ntype State = {\n  todos: Todo[],\n  query: string,\n  selectedBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    query: '',\n    selectedBy: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos('/todos');\n\n    // eslint-disable-next-line no-console\n    console.log(Object.keys(todos[0]));\n\n    this.setState({\n      todos,\n    });\n  }\n\n  changeInput = (query: string) => {\n    // eslint-disable-next-line no-console\n    console.log(query);\n\n    this.setState({ query });\n  };\n\n  selectHandler = async (selectBy: string) => {\n    // eslint-disable-next-line no-console\n    console.log('select changed');\n\n    let addUrl = '';\n\n    switch (selectBy) {\n      case 'active':\n        addUrl = '/todos?completed=false';\n        break;\n\n      case 'completed':\n        addUrl = '/todos?completed=true';\n        break;\n\n      default:\n        addUrl = '/todos';\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(addUrl);\n\n    const todos = await getTodos(addUrl);\n\n    this.setState({\n      todos,\n      selectedBy: selectBy,\n    });\n  };\n\n  filterTodos = () => {\n    const { query, todos, selectedBy } = this.state;\n\n    // eslint-disable-next-line no-console\n    console.log('selectedBy=', selectedBy, typeof selectedBy);\n\n    if (query.length === 0) {\n      return todos;\n    }\n\n    const queryToLowerCase: string = query.toLowerCase();\n\n    return todos.filter(todo => todo.title.toLocaleLowerCase().includes(queryToLowerCase));\n  };\n\n  changeStatusTodo = (todoId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(todoId);\n    const todosChanged = this.state.todos.map(todo => {\n      if (todo.id === todoId) {\n        const currentData = Date();\n\n        // eslint-disable-next-line no-console\n        console.log(todo, currentData);\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n          updatedAt: currentData,\n        };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: todosChanged,\n    }));\n  };\n\n  buttonStyle = (todoUserId: number) => {\n    const { currentUserId } = this.props;\n\n    return classNames(\n      'button',\n      'TodoList__user-button',\n      { 'TodoList__user-button--selected': currentUserId === todoUserId && currentUserId !== 0 },\n      { 'TodoList__user-button--not-selected': currentUserId !== todoUserId && currentUserId !== 0 },\n    );\n  };\n\n  render() {\n    const {\n      selectUserId,\n      // changeStatusTodo,\n      currentUserId,\n      // query,\n      // changeInput,\n      // selectedBy,\n      // selectHandler,\n    } = this.props;\n\n    const {\n      todos,\n      // selectUserId,\n      // changeStatusTodo,\n      // currentUserId,\n      query,\n      // changeInput,\n      selectedBy,\n      // selectHandler,\n    } = this.state;\n\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div>\n          <label htmlFor=\"search-query\" className=\"TodoList__search-label\">\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className={classNames(\n                'TodoList__search-input',\n                { 'TodoList__search-input--empty': todos.length === 0 },\n              )}\n              placeholder=\"Search todo\"\n              value={query}\n              onChange={event => this.changeInput(event.target.value)}\n            />\n          </label>\n\n          <select\n            className={classNames(\n              'TodoList__select',\n            )}\n            name=\"select\"\n            id=\"select\"\n            value={selectedBy}\n            onChange={(event) => this.selectHandler(event.target.value)}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n\n          <button\n            type=\"button\"\n            className=\"button\"\n          >\n            ramdomise\n          </button>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              !todo.completed ? (\n                <li\n                  key={`${todo.id}--unchecked`}\n                  className=\"TodoList__item TodoList__item--unchecked\"\n                >\n                  <label htmlFor={`${todo.id}`}>\n                    <input\n                      id={todo.id}\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      onChange={() => this.changeStatusTodo(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                    <p>\n                      Create:&nbsp;\n                      {todo.createdAt}\n                    </p>\n                    <p>{`Status: ${todo.completed} not`}</p>\n                  </label>\n\n                  <button\n                    className={this.buttonStyle(todo.userId)}\n                    type=\"button\"\n                    onClick={() => currentUserId !== todo.userId && selectUserId(todo.userId)}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                </li>\n              ) : (\n                <li\n                  key={`${todo.id}--checked`}\n                  className=\"TodoList__item TodoList__item--checked\"\n                >\n                  <label htmlFor={`${todo.id}`}>\n                    <input\n                      id={todo.id}\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      onChange={() => this.changeStatusTodo(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                    <p>{todo.createdAt}</p>\n                    <p>\n                      Done:&nbsp;\n                      {todo.updatedAt}\n                    </p>\n                    <p>{`Status: ${todo.completed} completed`}</p>\n                    <p>{currentUserId}</p>\n                  </label>\n\n                  <button\n                    className={this.buttonStyle(todo.userId)}\n                    type=\"button\"\n                    onClick={() => currentUserId !== todo.userId && selectUserId(todo.userId)}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                </li>\n              )\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { getCurrentUser } from '../../api/todos';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clearHandler: () => void,\n};\n\nexport class CurrentUser extends React.Component<Props> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n    },\n    showCurrentUser: false,\n  };\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadCurrentUser();\n    }\n  }\n\n  async loadCurrentUser() {\n    try {\n      const user = await getCurrentUser(this.props.userId);\n\n      // eslint-disable-next-line no-console\n      console.log('componentDidMount currentUser', user, Object.keys(user));\n\n      this.setState({\n        user,\n        showCurrentUser: true,\n      });\n      // eslint-disable-next-line no-console\n      console.log(this.state.user);\n    } catch (error) {\n      this.setState({ showCurrentUser: false });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      username,\n      email,\n      phone,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        {this.state.showCurrentUser ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {name}\n              {username}\n            </h3>\n            <p className=\"CurrentUser__email\">{email}</p>\n            <p className=\"CurrentUser__phone\">{phone}</p>\n\n            <button\n              type=\"button\"\n              onClick={() => this.props.clearHandler()}\n              className=\"button\"\n            >\n              Clear\n            </button>\n          </>\n        ) : (\n          <p>No selected user</p>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n// import {\n//   // getAllTodos,\n//   // getTodos,\n// } from './api/todos';\n\ninterface State {\n  // todos: Todo[],\n  selectedUserId: number,\n  // query: string,\n  // selectedBy: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    // todos: [],\n    selectedUserId: 0,\n    // query: '',\n    // selectedBy: 'all',\n  };\n\n  // async componentDidMount() {\n  //   const todos = await getAllTodos();\n\n  //   // eslint-disable-next-line no-console\n  //   console.log(Object.keys(todos[0]));\n\n  //   this.setState({\n  //     todos,\n  //   });\n  // }\n\n  selectUserId = (userId: number) => {\n    // eslint-disable-next-line no-console\n    console.log('selectUserId', userId);\n\n    this.setState({ selectedUserId: userId });\n  };\n\n  // changeStatusTodo = (todoId: string) => {\n  //   // eslint-disable-next-line no-console\n  //   console.log(todoId);\n  //   const todosChanged = this.state.todos.map(todo => {\n  //     if (todo.id === todoId) {\n  //       const currentData = Date();\n\n  //       // eslint-disable-next-line no-console\n  //       console.log(todo, currentData);\n\n  //       return {\n  //         ...todo,\n  //         completed: !todo.completed,\n  //         updatedAt: currentData,\n  //       };\n  //     }\n\n  //     return todo;\n  //   });\n\n  //   this.setState(() => ({\n  //     todos: todosChanged,\n  //   }));\n  // };\n\n  clearHandler = () => {\n    // eslint-disable-next-line no-console\n    console.log('clear');\n\n    this.setState({ selectedUserId: 0 });\n  };\n\n  // changeInput = (query: string) => {\n  //   // eslint-disable-next-line no-console\n  //   console.log(query);\n\n  //   this.setState({ query });\n  // };\n\n  // selectHandler = async (selectBy: string) => {\n  //   // eslint-disable-next-line no-console\n  //   console.log('select changed');\n\n  //   let addUrl = '';\n\n  //   switch (selectBy) {\n  //     case 'active':\n  //       addUrl = '/todos?completed=false';\n  //       break;\n\n  //     case 'completed':\n  //       addUrl = '/todos?completed=true';\n  //       break;\n\n  //     default:\n  //       addUrl = '/todos';\n  //   }\n\n  //   // eslint-disable-next-line no-console\n  //   console.log(addUrl);\n\n  //   const todos = await getTodos(addUrl);\n\n  //   this.setState({\n  //     todos,\n  //     selectedBy: selectBy,\n  //   });\n  // };\n\n  // filterTodos = () => {\n  //   const { query, todos, selectedBy } = this.state;\n\n  //   // eslint-disable-next-line no-console\n  //   console.log('selectedBy=', selectedBy, typeof selectedBy);\n\n  //   if (query.length === 0) {\n  //     return todos;\n  //   }\n\n  //   const queryToLowerCase: string = query.toLowerCase();\n\n  //   return todos.filter(todo => todo.title.toLocaleLowerCase().includes(queryToLowerCase));\n  // };\n\n  render() {\n    const {\n      selectedUserId,\n      //  query,\n      //  selectedBy,\n    } = this.state;\n    // const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            // todos={filteredTodos}\n            currentUserId={selectedUserId}\n            selectUserId={this.selectUserId}\n            // changeStatusTodo={this.changeStatusTodo}\n            // query={query}\n            // changeInput={this.changeInput}\n            // selectedBy={selectedBy}\n            // selectHandler={this.selectHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearHandler={this.clearHandler}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}