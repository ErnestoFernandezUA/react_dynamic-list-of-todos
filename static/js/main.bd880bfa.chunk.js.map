{"version":3,"sources":["api/request.ts","api/todos.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api/user.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","options","method","console","log","fetch","response","ok","Promise","reject","status","statusText","json","getTodos","addUrl","TodoList","state","todos","query","statusTodo","inputHandler","setState","selectStatusTodoHandler","userHandler","userId","props","currentUserId","selectUserId","filterTodos","length","queryToLowerCase","toLowerCase","filter","todo","title","toLocaleLowerCase","includes","randomize","array","randomArray","i","random","Math","floor","changeStatusTodo","todoId","todosChanged","map","id","date","Date","day","getDate","month","getMonth","year","getFullYear","currentData","completed","updatedAt","buttonStyle","todoUserId","classNames","this","filteredTodos","className","htmlFor","type","placeholder","value","onChange","event","target","name","onClick","checked","createdAt","React","Component","CurrentUser","user","username","email","phone","showCurrentUser","loadCurrentUser","prevProps","clearHandler","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd880bfa.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\ntype RequestOptionsType = {\n  method: 'GET' | 'POST' | 'DELETE';\n  headers?: { 'Content-type': 'application/json; charset=utf-8' };\n  body?: string;\n};\n\nexport const request = async (\n  url: string,\n  options: RequestOptionsType = {\n    method: 'GET',\n  },\n) => {\n  // eslint-disable-next-line no-console\n  console.log(`request to: ${BASE_URL}${url}`);\n\n  // eslint-disable-next-line no-console\n  console.log('request options:', options);\n\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  return response.json();\n};\n","import { request } from './request';\n\nexport const getTodos = (addUrl = '') => request(`/todos${addUrl}`);\n","import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\nimport { getTodos } from '../../api/todos';\n\ntype Props = {\n  currentUserId: number,\n  selectUserId: (userId: number) => void;\n};\n\ntype State = {\n  todos: Todo[],\n  query: string,\n  statusTodo: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    query: '',\n    statusTodo: 'all',\n  };\n\n  async componentDidMount() {\n    try {\n      const todos: Todo[] = await getTodos();\n\n      // eslint-disable-next-line no-console\n      console.log(todos);\n\n      this.setState({\n        todos,\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    } finally {\n      // eslint-disable-next-line no-console\n      console.log('finally');\n    }\n  }\n\n  inputHandler = (query: string) => {\n    this.setState({ query });\n  };\n\n  selectStatusTodoHandler = async (statusTodo: string) => {\n    let addUrl = '';\n\n    switch (statusTodo) {\n      case 'active':\n        addUrl = '?completed=false';\n        break;\n\n      case 'completed':\n        addUrl = '?completed=true';\n        break;\n\n      default:\n        addUrl = '';\n    }\n\n    const todos = await getTodos(addUrl);\n\n    this.setState({\n      todos,\n      statusTodo,\n    });\n  };\n\n  userHandler = (userId: number) => {\n    if (this.props.currentUserId !== userId) {\n      // eslint-disable-next-line no-console\n      console.log('userId = ', userId);\n\n      this.props.selectUserId(userId);\n    }\n  };\n\n  filterTodos = () => {\n    const { query, todos } = this.state;\n\n    if (query.length === 0) {\n      return todos;\n    }\n\n    const queryToLowerCase: string = query.toLowerCase();\n\n    return todos.filter(todo => todo.title.toLocaleLowerCase().includes(queryToLowerCase));\n  };\n\n  randomize = (array: Todo[]) => {\n    const randomArray = array;\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < randomArray.length; i++) {\n      const random = Math.floor(Math.random() * randomArray.length);\n\n      // eslint-disable-next-line no-param-reassign\n      [randomArray[i], randomArray[random]] = [randomArray[random], randomArray[i]];\n    }\n\n    this.setState({\n      todos: randomArray,\n    });\n  };\n\n  changeStatusTodo = (todoId: string) => {\n    const todosChanged = this.state.todos.map(todo => {\n      if (todo.id === todoId) {\n        const date = new Date();\n        const day = date.getDate();\n        const month = date.getMonth() + 1;\n        const year = date.getFullYear();\n        const currentData = `${day}/${month}/${year}`;\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n          updatedAt: currentData,\n        };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: todosChanged,\n    }));\n  };\n\n  buttonStyle = (todoUserId: number) => {\n    const { currentUserId } = this.props;\n\n    return classNames(\n      'button',\n      'TodoList__user-button',\n      { 'TodoList__user-button--selected': currentUserId === todoUserId && currentUserId !== 0 },\n      { 'TodoList__user-button--not-selected': currentUserId !== todoUserId && currentUserId !== 0 },\n    );\n  };\n\n  render() {\n    const {\n      todos,\n      query,\n      statusTodo,\n    } = this.state;\n\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__header\">\n          <label htmlFor=\"search-query\" className=\"TodoList__search-label\">\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className={classNames(\n                'TodoList__search-input',\n                { 'TodoList__search-input--empty': todos.length === 0 },\n              )}\n              placeholder=\"Search todo\"\n              value={query}\n              onChange={event => this.inputHandler(event.target.value)}\n            />\n          </label>\n\n          <select\n            className=\"TodoList__select\"\n            name=\"select\"\n            id=\"select\"\n            value={statusTodo}\n            onChange={(event) => this.selectStatusTodoHandler(event.target.value)}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n\n          <button\n            type=\"button\"\n            className=\"button TodoList__button\"\n            onClick={() => this.randomize(this.state.todos)}\n          >\n            ramdomise\n          </button>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={`${todo.id}--unchecked`}\n                className={classNames('TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed })}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    id={todo.id}\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => this.changeStatusTodo(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                  <p>\n                    Create:&nbsp;\n                    {todo.createdAt}\n                  </p>\n                  <p>{`Status: ${todo.completed} not`}</p>\n                </label>\n\n                <button\n                  className={this.buttonStyle(todo.userId)}\n                  type=\"button\"\n                  onClick={() => this.userHandler(todo.userId)}\n                >\n                  UserID&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { getUser } from '../../api/user';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clearHandler: () => void,\n};\n\nexport class CurrentUser extends React.Component<Props> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n    },\n    showCurrentUser: false,\n  };\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadCurrentUser();\n    }\n  }\n\n  async loadCurrentUser() {\n    try {\n      const user = await getUser(`${this.props.userId}`);\n\n      // eslint-disable-next-line no-console\n      console.log('user = ', user);\n\n      this.setState({\n        user,\n        showCurrentUser: true,\n      });\n    } catch (error) {\n      this.setState({ showCurrentUser: false });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      username,\n      email,\n      phone,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        {this.state.showCurrentUser ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {name}\n              {username}\n            </h3>\n            <p className=\"CurrentUser__email\">{email}</p>\n            <p className=\"CurrentUser__phone\">{phone}</p>\n\n            <button\n              type=\"button\"\n              onClick={() => this.props.clearHandler()}\n              className=\"button CurrentUser__button\"\n            >\n              Clear\n            </button>\n          </>\n        ) : (\n          <p>No selected user</p>\n        )}\n      </div>\n    );\n  }\n}\n","import { request } from './request';\n\nexport const getUser = (userId: string) => request(`/users/${userId}`);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUserId = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearHandler = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            currentUserId={selectedUserId}\n            selectUserId={this.selectUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearHandler={this.clearHandler}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}