{"version":3,"sources":["api/todos.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","getTodos","addUrl","fetch","then","response","json","TodoList","state","todos","query","selectedBy","changeInput","setState","selectHandler","selectBy","a","filterTodos","length","queryToLowerCase","toLowerCase","filter","todo","title","toLocaleLowerCase","includes","changeStatusTodo","todoId","todosChanged","map","id","currentData","Date","completed","updatedAt","buttonStyle","todoUserId","currentUserId","props","classNames","this","selectUserId","filteredTodos","className","htmlFor","type","placeholder","value","onChange","event","target","name","checked","createdAt","userId","onClick","React","Component","CurrentUser","user","username","email","phone","showCurrentUser","loadCurrentUser","prevProps","ok","Error","clearHandler","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18efbbbc.chunk.js","sourcesContent":["// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api`;\n\nexport function getCurrentUser(userId: number): Promise<Todo[]> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('error download user');\n      }\n\n      return response.json();\n    });\n}\n\nexport function getTodos(addUrl: string): Promise<Todo[]> {\n  return fetch(`${API_URL}${addUrl}`)\n    .then(response => response.json());\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\nimport { getTodos } from '../../api/todos';\n\ntype Props = {\n  currentUserId: number,\n  selectUserId: (userId: number) => void;\n};\n\ntype State = {\n  todos: Todo[],\n  query: string,\n  selectedBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    query: '',\n    selectedBy: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos('/todos');\n\n    this.setState({\n      todos,\n    });\n  }\n\n  changeInput = (query: string) => {\n    this.setState({ query });\n  };\n\n  selectHandler = async (selectBy: string) => {\n    let addUrl = '';\n\n    switch (selectBy) {\n      case 'active':\n        addUrl = '/todos?completed=false';\n        break;\n\n      case 'completed':\n        addUrl = '/todos?completed=true';\n        break;\n\n      default:\n        addUrl = '/todos';\n    }\n\n    const todos = await getTodos(addUrl);\n\n    this.setState({\n      todos,\n      selectedBy: selectBy,\n    });\n  };\n\n  filterTodos = () => {\n    const { query, todos } = this.state;\n\n    if (query.length === 0) {\n      return todos;\n    }\n\n    const queryToLowerCase: string = query.toLowerCase();\n\n    return todos.filter(todo => todo.title.toLocaleLowerCase().includes(queryToLowerCase));\n  };\n\n  changeStatusTodo = (todoId: string) => {\n    const todosChanged = this.state.todos.map(todo => {\n      if (todo.id === todoId) {\n        const currentData = Date();\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n          updatedAt: currentData,\n        };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: todosChanged,\n    }));\n  };\n\n  buttonStyle = (todoUserId: number) => {\n    const { currentUserId } = this.props;\n\n    return classNames(\n      'button',\n      'TodoList__user-button',\n      { 'TodoList__user-button--selected': currentUserId === todoUserId && currentUserId !== 0 },\n      { 'TodoList__user-button--not-selected': currentUserId !== todoUserId && currentUserId !== 0 },\n    );\n  };\n\n  render() {\n    const {\n      selectUserId,\n      currentUserId,\n    } = this.props;\n\n    const {\n      todos,\n      query,\n      selectedBy,\n    } = this.state;\n\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div>\n          <label htmlFor=\"search-query\" className=\"TodoList__search-label\">\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className={classNames(\n                'TodoList__search-input',\n                { 'TodoList__search-input--empty': todos.length === 0 },\n              )}\n              placeholder=\"Search todo\"\n              value={query}\n              onChange={event => this.changeInput(event.target.value)}\n            />\n          </label>\n\n          <select\n            className={classNames(\n              'TodoList__select',\n            )}\n            name=\"select\"\n            id=\"select\"\n            value={selectedBy}\n            onChange={(event) => this.selectHandler(event.target.value)}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n\n          <button\n            type=\"button\"\n            className=\"button\"\n          >\n            ramdomise\n          </button>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              !todo.completed ? (\n                <li\n                  key={`${todo.id}--unchecked`}\n                  className=\"TodoList__item TodoList__item--unchecked\"\n                >\n                  <label htmlFor={`${todo.id}`}>\n                    <input\n                      id={todo.id}\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      onChange={() => this.changeStatusTodo(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                    <p>\n                      Create:&nbsp;\n                      {todo.createdAt}\n                    </p>\n                    <p>{`Status: ${todo.completed} not`}</p>\n                  </label>\n\n                  <button\n                    className={this.buttonStyle(todo.userId)}\n                    type=\"button\"\n                    onClick={() => currentUserId !== todo.userId && selectUserId(todo.userId)}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                </li>\n              ) : (\n                <li\n                  key={`${todo.id}--checked`}\n                  className=\"TodoList__item TodoList__item--checked\"\n                >\n                  <label htmlFor={`${todo.id}`}>\n                    <input\n                      id={todo.id}\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      onChange={() => this.changeStatusTodo(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                    <p>{todo.createdAt}</p>\n                    <p>\n                      Done:&nbsp;\n                      {todo.updatedAt}\n                    </p>\n                    <p>{`Status: ${todo.completed} completed`}</p>\n                    <p>{currentUserId}</p>\n                  </label>\n\n                  <button\n                    className={this.buttonStyle(todo.userId)}\n                    type=\"button\"\n                    onClick={() => currentUserId !== todo.userId && selectUserId(todo.userId)}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                </li>\n              )\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { getCurrentUser } from '../../api/todos';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clearHandler: () => void,\n};\n\nexport class CurrentUser extends React.Component<Props> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n    },\n    showCurrentUser: false,\n  };\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadCurrentUser();\n    }\n  }\n\n  async loadCurrentUser() {\n    try {\n      const user = await getCurrentUser(this.props.userId);\n\n      this.setState({\n        user,\n        showCurrentUser: true,\n      });\n    } catch (error) {\n      this.setState({ showCurrentUser: false });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      username,\n      email,\n      phone,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        {this.state.showCurrentUser ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {name}\n              {username}\n            </h3>\n            <p className=\"CurrentUser__email\">{email}</p>\n            <p className=\"CurrentUser__phone\">{phone}</p>\n\n            <button\n              type=\"button\"\n              onClick={() => this.props.clearHandler()}\n              className=\"button\"\n            >\n              Clear\n            </button>\n          </>\n        ) : (\n          <p>No selected user</p>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUserId = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearHandler = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            currentUserId={selectedUserId}\n            selectUserId={this.selectUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearHandler={this.clearHandler}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}