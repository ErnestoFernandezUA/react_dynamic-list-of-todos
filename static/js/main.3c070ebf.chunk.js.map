{"version":3,"sources":["components/TodoList/TodoList.tsx","api/todos.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUserId","changeStatusTodo","currentUserId","query","changeInput","selectedBy","selectHandler","buttonStyle","todoUserId","classNames","className","htmlFor","type","id","length","placeholder","value","onChange","event","target","name","map","todo","completed","checked","title","createdAt","updatedAt","userId","onClick","API_URL","getTodos","addUrl","fetch","then","response","json","CurrentUser","state","user","username","email","phone","showCurrentUser","this","loadCurrentUser","prevProps","props","a","console","log","ok","Error","Object","keys","setState","clearHandler","React","Component","App","selectedUserId","todoId","todosChanged","currentData","Date","selectBy","filterTodos","queryToLowerCase","toLowerCase","filter","toLocaleLowerCase","includes","filteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c070ebf.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  currentUserId: number,\n  selectUserId: (userId: number) => void;\n  changeStatusTodo: (todoId: string) => void;\n  query: string,\n  changeInput: (text: string) => void;\n  selectedBy: string,\n  selectHandler: (text:string) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUserId,\n  changeStatusTodo,\n  currentUserId,\n  query,\n  changeInput,\n  selectedBy,\n  selectHandler,\n}) => {\n  const buttonStyle = (todoUserId: number) => {\n    return classNames(\n      'button',\n      'TodoList__user-button',\n      { 'TodoList__user-button--selected': currentUserId === todoUserId && currentUserId !== 0 },\n      { 'TodoList__user-button--not-selected': currentUserId !== todoUserId && currentUserId !== 0 },\n    );\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div>\n        <label htmlFor=\"search-query\" className=\"TodoList__search-label\">\n          <input\n            type=\"text\"\n            id=\"search-query\"\n            className={classNames(\n              'TodoList__search-input',\n              { 'TodoList__search-input--empty': todos.length === 0 },\n            )}\n            placeholder=\"Search todo\"\n            value={query}\n            onChange={event => changeInput(event.target.value)}\n          />\n        </label>\n\n        <select\n          className={classNames(\n            'TodoList__select',\n          )}\n          name=\"select\"\n          id=\"select\"\n          value={selectedBy}\n          onChange={(event) => selectHandler(event.target.value)}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"button\"\n        >\n          ramdomise\n        </button>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            !todo.completed ? (\n              <li\n                key={`${todo.id}--unchecked`}\n                className=\"TodoList__item TodoList__item--unchecked\"\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    id={todo.id}\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => changeStatusTodo(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                  <p>\n                    Create:&nbsp;\n                    {todo.createdAt}\n                  </p>\n                  <p>{`Status: ${todo.completed} not`}</p>\n                </label>\n\n                <button\n                  className={buttonStyle(todo.userId)}\n                  type=\"button\"\n                  onClick={() => currentUserId !== todo.userId && selectUserId(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ) : (\n              <li\n                key={`${todo.id}--checked`}\n                className=\"TodoList__item TodoList__item--checked\"\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    id={todo.id}\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => changeStatusTodo(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                  <p>{todo.createdAt}</p>\n                  <p>\n                    Done:&nbsp;\n                    {todo.updatedAt}\n                  </p>\n                  <p>{`Status: ${todo.completed} completed`}</p>\n                  <p>{currentUserId}</p>\n                </label>\n\n                <button\n                  className={buttonStyle(todo.userId)}\n                  type=\"button\"\n                  onClick={() => currentUserId !== todo.userId && selectUserId(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            )\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api`;\n\nexport function getAllTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getCompletedTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos?completed=true`)\n    .then(response => response.json());\n}\n\nexport function getActiveTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos?completed=false`)\n    .then(response => response.json());\n}\n\nexport function getCurrentUser(userId: number): Promise<Todo[]> {\n  // eslint-disable-next-line no-console\n  console.log(`${API_URL}/users/${userId}`);\n\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('404');\n      }\n\n      return response.json();\n    });\n}\n\nexport function getTodos(addUrl: string): Promise<Todo[]> {\n  return fetch(`${API_URL}${addUrl}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport { getCurrentUser } from '../../api/todos';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clearHandler: () => void,\n};\n\nexport class CurrentUser extends React.Component<Props> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n    },\n    showCurrentUser: false,\n  };\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadCurrentUser();\n    }\n  }\n\n  async loadCurrentUser() {\n    try {\n      const user = await getCurrentUser(this.props.userId);\n\n      // eslint-disable-next-line no-console\n      console.log('componentDidMount currentUser', user, Object.keys(user));\n\n      this.setState({\n        user,\n        showCurrentUser: true,\n      });\n      // eslint-disable-next-line no-console\n      console.log(this.state.user);\n    } catch (error) {\n      this.setState({ showCurrentUser: false });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      name,\n      username,\n      email,\n      phone,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        {this.state.showCurrentUser ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:&nbsp;\n                {id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              {name}\n              {username}\n            </h3>\n            <p className=\"CurrentUser__email\">{email}</p>\n            <p className=\"CurrentUser__phone\">{phone}</p>\n\n            <button\n              type=\"button\"\n              onClick={() => this.props.clearHandler()}\n              className=\"button\"\n            >\n              Clear\n            </button>\n          </>\n        ) : (\n          <p>No selected user</p>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos, getTodos } from './api/todos';\n\ninterface State {\n  todos: Todo[],\n  selectedUserId: number,\n  query: string,\n  selectedBy: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    selectedBy: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await getAllTodos();\n\n    // eslint-disable-next-line no-console\n    console.log(Object.keys(todos[0]));\n\n    this.setState({\n      todos,\n    });\n  }\n\n  selectUserId = (userId: number) => {\n    // eslint-disable-next-line no-console\n    console.log('selectUserId', userId);\n\n    this.setState({ selectedUserId: userId });\n  };\n\n  changeStatusTodo = (todoId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(todoId);\n    const todosChanged = this.state.todos.map(todo => {\n      if (todo.id === todoId) {\n        const currentData = Date();\n\n        // eslint-disable-next-line no-console\n        console.log(todo, currentData);\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n          updatedAt: currentData,\n        };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: todosChanged,\n    }));\n  };\n\n  clearHandler = () => {\n    // eslint-disable-next-line no-console\n    console.log('clear');\n\n    this.setState({ selectedUserId: 0 });\n  };\n\n  changeInput = (query: string) => {\n    // eslint-disable-next-line no-console\n    console.log(query);\n\n    this.setState({ query });\n  };\n\n  selectHandler = async (selectBy: string) => {\n    // eslint-disable-next-line no-console\n    console.log('select changed');\n\n    let addUrl = '';\n\n    switch (selectBy) {\n      case 'active':\n        addUrl = '/todos?completed=false';\n        break;\n\n      case 'completed':\n        addUrl = '/todos?completed=true';\n        break;\n\n      default:\n        addUrl = '/todos';\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(addUrl);\n\n    const todos = await getTodos(addUrl);\n\n    this.setState({\n      todos,\n      selectedBy: selectBy,\n    });\n  };\n\n  filterTodos = () => {\n    const { query, todos, selectedBy } = this.state;\n\n    // eslint-disable-next-line no-console\n    console.log('selectedBy=', selectedBy, typeof selectedBy);\n\n    if (query.length === 0) {\n      return todos;\n    }\n\n    const queryToLowerCase: string = query.toLowerCase();\n\n    return todos.filter(todo => todo.title.toLocaleLowerCase().includes(queryToLowerCase));\n  };\n\n  render() {\n    const { selectedUserId, query, selectedBy } = this.state;\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodos}\n            currentUserId={selectedUserId}\n            selectUserId={this.selectUserId}\n            changeStatusTodo={this.changeStatusTodo}\n            query={query}\n            changeInput={this.changeInput}\n            selectedBy={selectedBy}\n            selectHandler={this.selectHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearHandler={this.clearHandler}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}